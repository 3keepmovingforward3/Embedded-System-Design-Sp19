/******************************************************************************/
/*                                                                            */
/* main.c -- PmodAD1 Example Project                                          */
/*                                                                            */
/******************************************************************************/
/* Author: Arthur Brown                                                       */
/* Copyright 2017, Digilent Inc.                                              */
/******************************************************************************/
/* Module Description:                                                        */
/*                                                                            */
/* This file contains code for running a demonstration of the PmodAD1 when    */
/* used with the PmodAD1 IP core. This demo initializes the PmodAD1 IP core   */
/* and then polls its sample register, printing the analog voltage last       */
/* sampled by each of the AD1's two channels over UART.                       */
/*                                                                            */
/* Messages printed by this demo can be received by using a serial terminal   */
/* configured with the appropriate Baud rate. 115200 for Zynq systems, and    */
/* whatever the AXI UARTLITE IP is configured with for MicroBlaze systems,    */
/* typically 9600 or 115200 Baud.                                             */
/*                                                                            */
/******************************************************************************/
/* Revision History:                                                          */
/*                                                                            */
/*    08/15/2017(ArtVVB):   Created                                           */
/*    02/10/2018(atangzwj): Validated for Vivado 2017.4                       */
/*                                                                            */
/******************************************************************************/

#include <stdio.h>
#include "PmodAD1.h"
#include "sleep.h"
#include "xgpio.h"
#include "xil_io.h"
#include <xil_types.h>
#include "xparameters.h"



#define SECOND 1000000
#define LEDS 1  //channel
#define SWITCHES 2  //channel
#define WINDOWSIZE 1000
#define OVERLAP 0

XGpio LEDSWSInst;
PmodAD1 myDevice;
AD1_RawData RawData;
AD1_PhysicalData PhysicalData;


const float ReferenceVoltage = 3.3/2.0;
float window[WINDOWSIZE];
float avg = 0;
int num = 0;
float sum = 0;
float sumOverlap = 0;
int t = 0;

void ADInitialize();
void XGPIOInit();
void ADRun();


int main() {
	ADInitialize();
	XGPIOInit();
	ADRun();

}

void XGPIOInit(){
	//S_AXI_GPIO_0
	XGpio_Initialize(&LEDSWSInst,  XPAR_AXI_GPIO_0_DEVICE_ID);

	XGpio_SetDataDirection(&LEDSWSInst,LEDS,0x00);
	XGpio_SetDataDirection(&LEDSWSInst,SWITCHES,0xFF);

}

void ADRun() {
	int t = XGpio_DiscreteRead(&LEDSWSInst,SWITCHES);

	while(1){
	if(t == 0){
		while(t == 0){
			xil_printf("ECE3622 Lab 2\n");
			sleep(5);
			t = XGpio_DiscreteRead(&LEDSWSInst,SWITCHES);
		}
	}
	else
	if (t == 2){
		while(t == 2){
			AD1_GetSample(&myDevice, &RawData); // Capture raw samples
			// Convert raw samples into floats scaled to 0 - VDD
			AD1_RawToPhysical(ReferenceVoltage, RawData, &PhysicalData);
			printf("Reading Output: %f\n",PhysicalData[0]);
			if(PhysicalData[0] <= 0.2){XGpio_DiscreteWrite(&LEDSWSInst,LEDS,0);}
			else if(0.2 < PhysicalData[0] && PhysicalData[0] <= 0.4){XGpio_DiscreteWrite(&LEDSWSInst,LEDS,1);}
			else if(0.4 < PhysicalData[0] && PhysicalData[0] <= 0.6){XGpio_DiscreteWrite(&LEDSWSInst,LEDS,3);}
			else if(0.6 < PhysicalData[0] && PhysicalData[0] <= 0.8){XGpio_DiscreteWrite(&LEDSWSInst,LEDS,7);}
			else if(0.8 < PhysicalData[0] ){XGpio_DiscreteWrite(&LEDSWSInst,LEDS,15);}
			else {XGpio_DiscreteWrite(&LEDSWSInst,LEDS,0);}
			sleep(1);
			t = XGpio_DiscreteRead(&LEDSWSInst,SWITCHES);
		}
	}
	else

		if (t == 4){
			int count = 0;
		while(t == 4){
			sum = 0;
			sumOverlap = 0;
			for (int t = 0; t<WINDOWSIZE;t++){
				AD1_GetSample(&myDevice, &RawData); // Capture raw samples
				// Convert raw samples into floats scaled to 0 - VDD
				AD1_RawToPhysical(ReferenceVoltage, RawData, &PhysicalData);
				window[t] =  PhysicalData[0];

			}

			for(int t = 0; t<OVERLAP;t++){
				sumOverlap = window[t] + sumOverlap;
			}

			for(int t = 0; t<WINDOWSIZE;t++){
				sum = window[t] + sum;

			}

			avg = (sum-sumOverlap) / (float) WINDOWSIZE;
			printf("%d,%f\n",count,avg);
			count++;
			sleep(1);
			t = XGpio_DiscreteRead(&LEDSWSInst,SWITCHES);
		}

	}
	}

}

void ADInitialize() {

   AD1_begin(&myDevice, XPAR_PMODAD1_0_AXI_LITE_SAMPLE_BASEADDR);

   // Wait for AD1 to finish powering on
   usleep(1); // 1 us (minimum)
}





