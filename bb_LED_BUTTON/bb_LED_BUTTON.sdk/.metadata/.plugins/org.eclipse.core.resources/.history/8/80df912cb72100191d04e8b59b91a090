/*
 * LED_test.c
 *
 *  Created on: 	13 June 2013
 *      Author: 	Ross Elliot
 *     Version:		1.2
 */

/********************************************************************************************
* VERSION HISTORY
********************************************************************************************
* 	v1.2 - 13 February 2015
* 		Modified for Zybo Development Board ~ DN
*
* 	v1.1 - 27 January 2014
* 		GPIO_DEVICE_ID definition updated to reflect new naming conventions in Vivado 2013.3
*		onwards.
*
*	v1.0 - 13 June 2013
*		First version created.
*******************************************************************************************/

/********************************************************************************************
 * This file contains an example of using the GPIO driver to provide communication between
 * the Zynq Processing System (PS) and the AXI GPIO block implemented in the Zynq Programmable
 * Logic (PL). The AXI GPIO is connected to the LEDs on the Zybo.
 *
 * The provided code demonstrates how to use the GPIO driver to write to the memory mapped AXI
 * GPIO block, which in turn controls the LEDs.
 ********************************************************************************************/

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"

/* Definitions */
#define BTNS_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID	/* GPIO device that BTNs are connected to */
#define LEDS_DEVICE_ID  XPAR_AXI_GPIO_1_DEVICE_ID	/* GPIO device that LEDs are connected to */
#define LED_DELAY 15000000							/* Software delay length */

XGpio BTNInst, LEDInst;								/* GPIO Device driver instance */

// Function Prototypes
void board_variable_init();

/* Main function. */
int main(void){

	static int btn_status, Delay;
	int led_count_up_zero = 0;
	int led_count_down_from_15 = 15;
	board_variable_init();
	XGpio_DiscreteWrite(&LEDInst, 1, 0b0110);

	while(1)
	{
		//XGpio_DiscreteWrite(&LEDInst, 1, 0x2);
		btn_status = XGpio_DiscreteRead(&BTNInst, 1);
		switch (btn_status){
		case(0):
				XGpio_DiscreteWrite(&LEDInst, 1, led_count_from_zero);
				led_count_from_zero = led_count_from_zero + 1;
				break;
		case(1):
				XGpio_DiscreteWrite(&LEDInst, 1, led_count);
				led_count = led_count - 1;
				break;

		default:
			break;
		}
		for (Delay = 0; Delay < LED_DELAY; Delay++);

	}
	return 0;
}

void board_variable_init(){

	/* GPIO LED driver initialization */
	XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);


	/* GPIO Button driver initialization */
	XGpio_Initialize(&BTNInst, BTNS_DEVICE_ID);


	/*Set the direction for the LEDs to output. */
	XGpio_SetDataDirection(&LEDInst, 1, 0x00);

	/*Set the direction for the BTNs to input. */
	XGpio_SetDataDirection(&BTNInst, 1, 0xFF);

}
